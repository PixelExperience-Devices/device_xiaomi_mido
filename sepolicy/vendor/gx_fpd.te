type gx_fpd, domain;
type gx_fpd_exec, exec_type, vendor_file_type, file_type;

# gx_fpd
init_daemon_domain(gx_fpd)

# Allow Binder communication
vndbinder_use(gx_fpd)
binder_call(gx_fpd, hal_fingerprint_default)

# Add services
add_service(gx_fpd, gx_fpd_service)

typeattribute gx_fpd data_between_core_and_vendor_violators;

# Allow storing goodix data
allow gx_fpd { persist_drm_file gx_fpd_data_file }:dir create_dir_perms;
allow gx_fpd { persist_drm_file gx_fpd_data_file }:file create_file_perms;

# Allow access to goodix device
allow gx_fpd gx_fpd_device:chr_file rw_file_perms;

# Allow access to tee device
allow gx_fpd tee_device:chr_file rw_file_perms;

# Allow access to ion device
allow gx_fpd ion_device:chr_file rw_file_perms;

# Allow create socket
allow gx_fpd self:socket create_socket_perms_no_ioctl;
allow gx_fpd self:{ netlink_socket netlink_generic_socket } create_socket_perms_no_ioctl;

# Allow reading firmware file
r_dir_file(gx_fpd, firmware_file)

# Ignore all logging requests
dontaudit gx_fpd storage_file:dir search;
